//
// Created by alexl on 21.07.2023.
//

#pragma once
#include <vector>
#include <filesystem>
#include <string>
#include "ScriptParser.h"
#include <sstream>
#include <fstream>
namespace BeeEngine::Editor
{
    namespace CodeGenerators
    {
        static std::vector<std::filesystem::path> s_Visited;

        static std::filesystem::path s_WorkingDirectory;
        static std::filesystem::path s_OutputDirectory;

        static bool WasSourceFileVisited(const BeeClass& beeClass)
        {
            return std::find(s_Visited.begin(), s_Visited.end(), beeClass.Path) != s_Visited.end();
        }

        static void GenerateInitFile(const std::vector<BeeClass>& beeClasses, const std::filesystem::path& folderPath)
        {
            std::ostringstream source;

            source << "//GENERATED CODE. DO NOT EDIT THIS FILE!\n";
            source << "//Necessary includes";
            source << "#include <BeeEngine.h>\n";
            source << "#include <Scene/INativeScriptRegistry.h>\n";
            source << "\n";
            source << "//User Scripts\n";

            for (const auto& beeClass : beeClasses)
            {
                if(!beeClass.Path.is_absolute())
                    source << "#include \"" << s_WorkingDirectory.string() << "\\" << beeClass.Path.filename().string() << "\"\n";
                else
                    source << "#include \"" << beeClass.Path.filename().string() << "\"\n";
                s_Visited.push_back(beeClass.Path);
            }
            source << "\n";
            source << "extern \"C\"{void InitGameLibrary(void* data);}";
            source << "\n";
            source << "static BeeEngineNativeScriptRegistryData* g_HostData = nullptr;\n";
            source << "\n";
            source << "void* CreateNativeScript(const char* name)\n";
            source << "{\n";
            for (const auto& beeClass : beeClasses)
            {
                source << "\tif (strcmp(name, \"" << beeClass.Name << "\") == 0)\n";
                source << "\t{\n";
                source << "\t\treturn new " << beeClass.Name << "();\n";
                source << "\t}\n";
            }
            source << "\treturn nullptr;\n";
            source << "}\n";
            source << "\n";
            source << "void RegisterScripts()\n";
            source << "{\n";
            for (const auto& beeClass : beeClasses)
            {
                source << "\tg_HostData->RegisterScript_HostOwned(\"" << beeClass.Name << "\",\n";
                size_t fieldsCount = beeClass.Variables.size();
                source << "\t\t";
                if(fieldsCount == 0)
                {
                    source << "nullptr, 0);\n";
                    continue;
                }
                source << "new BeeEngine::NativeScriptFieldInfo[" << fieldsCount << "]{\n";
                for (size_t i = 0; i < fieldsCount; i++)
                {
                    source << "\t\t\t{ \"" << beeClass.Variables[i].Type << "\", \"" << beeClass.Variables[i].Identifier << "\" }";
                    if(i != fieldsCount - 1)
                        source << ",";
                    source << "\n";
                }
                source << "\t\t},\n";
                source << "\t\t" << fieldsCount << ");\n";
            }
            source << "}\n";
            source << "\n";
            source << "void InitGameLibrary(void* data)\n";
            source << "{\n";
            source << "\tg_HostData = (BeeEngineNativeScriptRegistryData*)data;\n";
            source << "\tg_HostData->CreateNativeScript_ClientOwned = CreateNativeScript;\n";
            source << "\tRegisterScripts();\n";
            source << "}\n";

            if(!std::filesystem::exists(folderPath / "Generated"))
                std::filesystem::remove(folderPath / "Generated");
            std::ofstream file(folderPath / "Generated"/ "Init.cpp");
            source.flush(); //Might not be necessary
            file << source.str();
            file.close();
        }

        static void GenerateCMakeFile(const std::filesystem::path& filepath)
        {
            std::ostringstream source;
            source << "cmake_minimum_required(VERSION 3.25)\n";
            source << "project(GameLibrary)\n";
            source << "set(CMAKE_CXX_STANDARD 23)\n";
            source << "set(CMAKE_CXX_STANDARD_REQUIRED ON)\n";
            source << "file(GLOB_RECURSE GENERATED_SOURCES \"Generated/*.cpp\")\n";
            source << "file(GLOB_RECURSE SCRIPT_SOURCES \"${BEE_GAME_PROJECT_FOLDER}/*.h\")\n";
            source << "add_library(GameLibrary SHARED ${GENERATED_SOURCES} ${SCRIPT_SOURCES})\n";
            source << "target_include_directories(GameLibrary PUBLIC ${BEE_GAME_PROJECT_FOLDER})\n";

            source << "add_library(BeeEngine STATIC IMPORTED)\n";
            source << "set_target_properties(BeeEngine PROPERTIES IMPORTED_LOCATION ${BEE_ENGINE_LIBRARY_PATH})\n";
            source << "target_include_directories(BeeEngine\n";
            source << "\tINTERFACE ${BEE_ENGINE_DIR}/include\n";
            source << "\tINTERFACE ${BEE_ENGINE_DIR}/src\n";
            source << "\tINTERFACE ${BEE_ENGINE_DIR}/vendor/gsl/include\n";
            source << "\tINTERFACE ${BEE_ENGINE_DIR}/vendor/debugbreak\n";
            source << "\tINTERFACE ${BEE_ENGINE_DIR}/vendor/magic_enum/include\n";
            source << "\tINTERFACE ${BEE_ENGINE_DIR}/vendor/glm\n";
            source << "\tINTERFACE ${BEE_ENGINE_DIR}/vendor/glm/glm\n";
            source << "\tINTERFACE ${BEE_ENGINE_DIR}/vendor/entt/single_include\n";
            source << "\tINTERFACE ${BEE_ENGINE_DIR}/vendor/spdlog/include\n";
            source << ")\n";
            source << "target_link_libraries(GameLibrary PRIVATE BeeEngine)\n";

            std::ofstream file(filepath / "CMakeLists.txt");
            source.flush(); //Might not be necessary
            file << source.str();
            file.close();
        }

        static void Generate(const std::vector<BeeClass>& beeClasses, const std::filesystem::path& folderPath)
        {
            GenerateInitFile(beeClasses, folderPath);
            GenerateCMakeFile(folderPath);
        }
    };
}
